# -*- coding: utf-8 -*-
"""Gdp Full analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sWpZFX5Pdb9g6gMYQDUDgDvWoP0nv3lR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from pathlib import Path
import plotly.express as px
import ipywidgets as widgets
from IPython.display import display

df = pd.read_csv("/content/2020-2025.csv")
df.head()

display(df.isnull().sum())

year_cols = df.columns[1:]  # Only year columns
df[year_cols] = df[year_cols].apply(
    lambda row: row.fillna(row.mean()), axis=1
)
display(df.isnull().sum())

import seaborn as sns
display(df.describe())

# Sirf year wali columns
year_cols = df.columns[1:]

# Boxplot (min, max, median, quartiles)
plt.figure(figsize=(4,5))
sns.boxplot(data=df[year_cols])
plt.title("GDP Distribution (Boxplot)")
plt.ylabel("GDP Values")
plt.show()

df.Country.nunique()

year_cols = df.columns[1:]

# Function to highlight Top 5 values in green
def highlight_top5(s):
    is_top5 = s >= s.nlargest(5).min()
    return ['background-color: Yellow' if v else '' for v in is_top5]

# Loop for each year
for year in year_cols:
    print(f"Top 5 countries with Highest GDP in {year}")
    top5 = df.sort_values(by=year, ascending=False).head(5)

    # Style apply only on that year's column
    display(top5.style.apply(highlight_top5, subset=[year]))
    print("-" * 60)

year_cols = df.columns[1:]

# Function to highlight Top 5 values in green
def highlight_top5(s):
    is_top5 = s >= s.nlargest(5).min()
    return ['background-color: lightblue' if v else '' for v in is_top5]

# Loop for each year
for year in year_cols:
    print(f"Top 5 countries with Lowest GDP in {year}")
    top5 = df.sort_values(by=year, ascending=True).head(5)

    # Style apply only on that year's column
    display(top5.style.apply(highlight_top5, subset=[year]))
    print("-" * 60)

# ---- Numeric growth column ----
df["2020-2025_growth"] = (df["2025"] - df["2020"]) / df["2020"] * 100

# ---- Top 10 by numeric growth ----
top10 = df.sort_values(by="2020-2025_growth", ascending=False).head(10).copy()

# ---- Display column with % sign ----
top10["2020-2025%"] = top10["2020-2025_growth"].map(lambda x: f"{x:.2f}%")

# ---- Remove numeric column (optional) ----
top10.drop(columns="2020-2025_growth", inplace=True)

# ---- Highlight growth column in green ----
def highlight_green(s):
    return ['background-color: lightgreen' for _ in s]

display(top10.style.apply(highlight_green, subset=["2020-2025%"]))

# ---- Numeric growth column ----
df["2020-2025_growth"] = (df["2025"] - df["2020"]) / df["2020"] * 100

# ---- Top 10 by numeric growth ----
top10 = df.sort_values(by="2020-2025_growth", ascending=True).head(10).copy()

# ---- Display column with % sign ----
top10["2020-2025%"] = top10["2020-2025_growth"].map(lambda x: f"{x:.2f}%")

# ---- Remove numeric column (optional) ----
top10.drop(columns="2020-2025_growth", inplace=True)

# ---- Highlight growth column in green ----
def highlight_green(s):
    return ['background-color: lightcoral' for _ in s]

display(top10.style.apply(highlight_green, subset=["2020-2025%"]))

# Ensure all columns are strings
df.columns = [str(c).strip() for c in df.columns]

# Identify only year columns (must be digits)
year_cols = [c for c in df.columns if c.isdigit()]

# Convert year columns to numeric GDP values
df[year_cols] = df[year_cols].apply(pd.to_numeric, errors="coerce")

# Fill missing values row-wise (forward + backward)
df[year_cols] = df[year_cols].ffill(axis=1).bfill(axis=1)

# Melt into tidy format
tidy = df.melt(
    id_vars="Country",
    value_vars=year_cols,
    var_name="Year",
    value_name="GDP"
)

# Convert Year safely
tidy["Year"] = tidy["Year"].astype(int)

# Ensure GDP is numeric
tidy["GDP"] = pd.to_numeric(tidy["GDP"], errors="coerce")

# Sort and rank
tidy = tidy.sort_values(["Year", "GDP"], ascending=[True, False]).reset_index(drop=True)
tidy["Rank"] = tidy.groupby("Year")["GDP"].rank(method="first", ascending=False)

tidy.head(15)  # check output

def pick_countries(n=10, by_year=2025, min_gdp=None, include=None):
    """
    Pick a set of countries to plot lines for.
    - n: top-N by GDP in `by_year`
    - min_gdp: minimum GDP threshold in `by_year` (overrides n if used)
    - include: list of country names to always include
    """
    # Filter for given year
    year_df = tidy[tidy["Year"] == by_year].dropna(subset=["GDP"])
    if year_df.empty:
        raise ValueError(f"No data found for year {by_year}")

    chosen = set()

    if min_gdp is not None:
        # All countries above GDP threshold
        chosen.update(year_df.loc[year_df["GDP"] >= min_gdp, "Country"].tolist())
    else:
       # Top N by GDP
        chosen.update(
            year_df.sort_values("GDP", ascending=False).head(n)["Country"].tolist()
        )

    # Always include these countries if provided
    if include:
        if isinstance(include, str):  # single country string
            chosen.add(include)
        else:  # list or set
            chosen.update(include)

    return sorted(chosen)

def plot_lines(countries=None, start=2020, end=2025, n_top=5):
    # Filter years
    data = tidy[(tidy["Year"] >= start) & (tidy["Year"] <= end)]

    # Agar countries na di gayi ho to top-N by GDP in "end" year
    if countries is None:
        countries = (
            data[data["Year"] == end]
            .sort_values("GDP", ascending=False)
            .head(n_top)["Country"]
            .tolist()
        )

    # Plot
    fig, ax = plt.subplots(figsize=(10, 6))
    for c in countries:
        sub = data[data["Country"] == c].sort_values("Year")
        if not sub.empty:  # skip if no data for that country
            ax.plot(sub["Year"], sub["GDP"], label=c, linewidth=2)

    # Dynamic title
    if countries is None:
       title = f"Top {n_top} Countries: GDP Evolution {start}-{end}"
    else:
        title = f"GDP Evolution {start}-{end} for Selected Countries"

    ax.set_title(title, fontsize=14, weight="bold")
    ax.set_xlabel("Year")
    ax.set_ylabel("GDP")

    # Formatting
    ax.grid(True, alpha=0.3)
    ax.legend(loc="best", fontsize=8, ncol=2)
    ax.ticklabel_format(style="plain", axis="y")  # avoid scientific notation

    plt.tight_layout()
    plt.show()

# Example usage
plot_lines()               # Top 5 auto
# plot_lines(["Pakistan","India","China"], start=2010, end=2025)  # Custom

def bar_chart_race(save_path="bar_chart_race.mp4", top_n=10, start=2020, end=2025, fps=2):
    years = list(range(start, end+1))
    frames = []

    # Prepare top-N frames
    for y in years:
        frame = (
            tidy[tidy["Year"] == y]
            .nlargest(top_n, "GDP")
            .sort_values("GDP", ascending=True)  # bottom to top
        )
        frames.append(frame)

    # Figure
    fig, ax = plt.subplots(figsize=(7, 5))

    def update(i):
        frame = frames[i]
        ax.clear()
        ax.barh(frame["Country"], frame["GDP"], color="skyblue")
        ax.set_xlabel("GDP")
        ax.set_xlim(0, frame["GDP"].max() * 1.1)  # thoda space right me
        ax.set_title(f"Top {top_n} GDP — {years[i]}")
        ax.grid(True, axis="x", alpha=0.3)

    anim = FuncAnimation(fig, update, frames=len(years), interval=1000//fps, repeat=False)

    try:
        anim.save(save_path, fps=fps, dpi=150)
        print(f" Saved animation: {Path(save_path).resolve()}")
    except Exception as e:
        print(" Could not save video (maybe ffmpeg missing). Showing inline instead.\n", e)
        plt.show()

bar_chart_race()

# ---- Growth % calculate ----
df["Growth%"] = (df["2025"] - df["2020"]) / df["2020"] * 100

# ---- Widgets ----
top_n_selector = widgets.IntSlider(
    value=5,
    min=2,
    max=40,
    step=1,
    description="Top N Countries:",
    style={'description_width': 'initial'},
    continuous_update=False
)

mode_selector = widgets.ToggleButtons(
    options=["Gain", "Drop"],
    value="Gain",
    description="View Mode:",
    style={'description_width': 'initial'}
)

# ---- Update Function ----
def update_dashboard(top_n, mode):
    if mode == "Gain":
        data = df.nlargest(top_n, "Growth%").copy()
        title = f"Top {top_n} Countries with Highest GDP Growth (2020–2025)"
        colors = ["darkgreen"] + ["lightgreen"] * (len(data) - 1)
    else:
        data = df.nsmallest(top_n, "Growth%").copy()
        title = f"Top {top_n} Countries with Sharpest GDP Drop (2020–2025)"
        colors = ["darkred"] + ["lightcoral"] * (len(data) - 1)

    # Plot with manual colors
    fig = px.bar(
        data,
        x="Country",
        y="Growth%",
        text=data["Growth%"].round(2).astype(str) + "%",
        title=title
    )

    # Apply custom colors
    fig.update_traces(marker_color=colors, textposition="outside")
    fig.update_layout(
        width=1000,
        height=800,
        yaxis_title="Growth %",
        xaxis_title="Country",
        title_font_size=34
    )
    fig.show()

# ---- Display Interactive ----
ui = widgets.VBox([top_n_selector, mode_selector])
out = widgets.interactive_output(update_dashboard, {"top_n": top_n_selector, "mode": mode_selector})

display(ui, out)